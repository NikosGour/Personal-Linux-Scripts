#!/bin/env bash

github_profile="NikosGour"

# get params to get project name
project_name=""

usage() {
	printf "Usage: go_init [option] project_name\n\n\t-g\tIf you are planning on publishing on github. Make sure to change your github username in the script\n"
}

github_flag=false

# if no arguments pass print usage
if [ "$1" == "" ]; then
	usage
	exit 1
fi

while [ "$1" != "" ]; do
	case $1 in
	-g)
		github_flag=true
		;;
	# release)
	# 	release_flag=true
	# 	;;
	# clean)
	# 	clean_flag=true
	# 	;;
	*)
		project_name=$1
		;;
	esac
	shift
done

mkdir $project_name
cd $project_name
mod_name="$project_name"
if [ $github_flag == true ]; then
	git init
	mod_name="github.com/$github_profile/$project_name"
	go mod init github.com/$github_profile/$project_name
else
	go mod init $project_name
fi
mkdir internal out
printf "out/" >.gitignore

mkdir -p internal/projectpath
project_path_file='package projectpath

import (
	"path"
	"path/filepath"
	"runtime"
)

var (
	_, b, _, _ = runtime.Caller(0)

	// Root folder of this project
	Root = filepath.Join(filepath.Dir(b), "../..")
)

func RootFile(filepath string) string {
	return path.Join(Root, filepath)
}
'
echo "$project_path_file" >internal/projectpath/projectpath.go

mkdir build
printf "//go:build debug\n\npackage build\n\nconst (\n\tDEBUG_MODE = true\n)" >build/config.debug.go
printf "//go:build !debug\n\npackage build\n\nconst (\n\tDEBUG_MODE = false\n)" >build/config.release.go

mkdir -p cmd/cli
printf "package main\n\nimport (\n\t\"$mod_name/build\"\n\tlog \"github.com/NikosGour/logging/log\"\n)\n\n" > cmd/cli/main.go
printf "func main(){\n\tlog.Debug(\"DEBUG_MODE = %%t\\\n\",build.DEBUG_MODE)\n}" >>cmd/cli/main.go

cp ~/config_files/go_build.sh build.sh
sed -i "s/__PROJECT_NAME__/$project_name/g" build.sh
chmod +x build.sh

go get -v -u github.com/NikosGour/logging@latest
